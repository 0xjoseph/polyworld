PERFORMANCE_PROFILER = False # temp hack. add command-line switch

import os
import sys

from scons_util import exclude, find, init_env, relocate_paths, export_dynamic
from scons_util import import_OpenGL, import_OpenMP, import_GSL, import_Qt, import_zlib, import_python

SRCDIRS = ['src/' + x
		   for x in ['app',
                     'library',
					 'tools']]

def build():
	envs = env_create()

	Default( build_Polyworld(envs['Polyworld']) )
	Default( build_CalcComplexity(envs['CalcComplexity']) )
	Default( build_PwMoviePlayer(envs['PwMoviePlayer']) )
	Default( build_rancheck(envs['rancheck']) )
	Default( build_proputil(envs['proputil']) )
	Default( build_pmvutil(envs['pmvutil']) )
	Default( build_qt_clust(envs['qt_clust']) )
	build_cppprops(envs['cppprops'])

def build_Polyworld(env):
	blddir = '.bld/Polyworld'

	srcdirs = exclude(SRCDIRS, ['src/tools'])
	env.Replace( CPPPATH = exclude(env['CPPPATH'], ['src/tools']) )

	sources = Flatten([find(srcdir,
							name = '*.cc')
					   for srcdir in srcdirs])

	env.VariantDir(blddir, 'src', False)

	return env.Program('Polyworld',
					   relocate_paths(sources,
									  'src',
									  blddir))

def build_CalcComplexity(env):
	blddir = '.bld/CalcComplexity'

	sources = find('src/tools/CalcComplexity',
				   name = '*.cc')
	sources += find('src/library/complexity',
					name = 'complexity_*.cc')
	sources += ['src/library/utils/datalib.cc',
				'src/library/utils/Variant.cc',
				'src/library/utils/AbstractFile.cc',
				'src/library/utils/misc.cc']

	env.VariantDir(blddir, 'src', False)

	return env.Program('bin/CalcComplexity',
					   relocate_paths(sources,
									  'src',
									  blddir))

def build_PwMoviePlayer(env):
	blddir = '.bld/PwMoviePlayer'

	sources = find('src/tools/PwMoviePlayer',
				   name = '*.cc')
	sources += ['src/library/utils/PwMovieUtils.cc']

	env.VariantDir(blddir, 'src', False)

	return env.Program('bin/PwMoviePlayer',
					   relocate_paths(sources,
									  'src',
									  blddir))

def build_rancheck(env):
	blddir = '.bld/rancheck'

	sources = ['src/tools/rancheck/rancheck.c']

	env.VariantDir(blddir, 'src', False)

	return env.Program('bin/rancheck',
					   relocate_paths(sources,
									  'src',
									  blddir))

def build_proputil(env):
	blddir = '.bld/proputil'

	sources = find('src/tools/proputil',
				   name = '*.cc')
	sources += find( 'src/library/proplib',
					 name = '*.cc',
					 ignore = ['state.cc'] )
	sources += ['src/library/utils/misc.cc']

	env.VariantDir(blddir, 'src', False)

	return env.Program('bin/proputil',
					   relocate_paths(sources,
									  'src',
									  blddir))

def build_pmvutil(env):
	blddir = '.bld/pmvutil'

	sources = find('src/tools/pmvutil',
				   name = '*.cc')
	sources += ['src/library/utils/PwMovieUtils.cc']

	env.VariantDir(blddir, 'src', False)

	return env.Program('bin/pmvutil',
					   relocate_paths(sources,
									  'src',
									  blddir))

def build_qt_clust(env):
	blddir = '.bld/qt_clust'

	sources = ['src/tools/clustering/qt_clust.cc']

	env.VariantDir(blddir, 'src', False)

	return env.Program('bin/qt_clust',
					   relocate_paths(sources,
									  'src',
									  blddir))

def build_cppprops(env):
	blddir = '.bld/cppprops/bld'

	sources = ['.bld/cppprops/src/generated.cc']

	env.VariantDir(blddir, '.bld/cppprops/src', False)

	return env.SharedLibrary( '.bld/cppprops/bin/cppprops',
							  sources )

def env_create():
	envs = {}


	env = env_common = init_env(Environment())
	env.Append( CPPSUFFIXES = ['.cc'] )
	if os.popen('uname').readlines()[0].strip() == 'Darwin':
		env['CXX'] = '/usr/local/bin/g++'
		env['CC'] = '/usr/local/bin/g++'
	#cpp_flags = ['-g', '-Wall', '-O2' ]
	cpp_flags = ['-g', '-Wall', '-Wno-format-security', '-std=c++11' ]

	if PERFORMANCE_PROFILER:
		# use the gnu gprof
		cpp_flags += ['-pg']
		env.Append( LINKFLAGS = ['-pg'] )

	try:
		cpp_flags += os.environ['CPPFLAGS'].split(' ')
	except KeyError:
		pass
	env.Append( CPPFLAGS = cpp_flags )
	env.Append( CPPPATH = find('src',
							   type = 'dir') )
	try:
		env.Append( LINKFLAGS = os.environ['LDFLAGS'].split(' ') )
	except KeyError:
		pass

	# This allows proplib dynamic properties to reference globals in Polyworld.
	export_dynamic(env)

	import_OpenMP(env)
	import_GSL(env)

	env = envs['Polyworld'] = env_common.Clone()
	import_OpenGL(env)
	import_Qt(env,
			  qtmodules = ['QtCore',
						   'QtGui',
						   'QtOpenGL'])
	import_zlib(env)
	try:
		python_version = os.environ['PYTHONVER']
	except KeyError:
		python_version = None

	if python_version:
		import_python(env, python_version)
	else:
		import_python(env)

	env = envs['CalcComplexity'] = env_common.Clone()
	import_zlib(env)

	envs['PwMoviePlayer'] = envs['Polyworld'].Clone()

	envs['rancheck'] = envs['CalcComplexity'].Clone()

	envs['proputil'] = envs['CalcComplexity'].Clone()

	if python_version:
		import_python( envs['proputil'], python_version )
	else:
		import_python( envs['proputil'] )

	envs['pmvutil'] = envs['PwMoviePlayer'].Clone()

	envs['qt_clust'] = envs['CalcComplexity'].Clone()

	envs['cppprops'] = envs['Polyworld'].Clone()

	return envs

################################################################################

build()
